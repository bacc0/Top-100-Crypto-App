{"version":3,"sources":["components/TableHead.jsx","components/tableComponents/Name.jsx","components/tableComponents/Symbol.jsx","helpers/helpers.js","components/tableComponents/LogoPic.jsx","components/tableComponents/InvisibleMenu.jsx","components/tableComponents/Price.jsx","helpers/helperChart.js","components/tableComponents/Chart.jsx","components/tableComponents/Supply.jsx","components/tableComponents/MarketCap.jsx","components/tableComponents/Volume24h.jsx","components/tableComponents/PercentChange24h.jsx","components/tableComponents/InvisibleMenuTwo.jsx","components/TableBody.jsx","components/Table.jsx","components/Pagination.jsx","App.js","helpers/helperPaginate.js","serviceWorker.js","index.js"],"names":["TableHead","className","id","Name","name","Symbol","symbol","dateTimeConvert","input","convertTime","toString","day","slice","time","toFixedTwo","Math","floor","toFixed","splitEveryThreeDigit","splitted","split","divider","length","count","countTwo","result","i","numberType","LogoPic","logoPic","src","alt","InvisibleMenu","Price","props","state","price_time","this","price","arrFromInput","numbersAfterHundreds","nextProps","prevState","Component","chartDataHelper","arr","nth","priceAndTimeData","nthNumber","filter","e","map","el","push","concat","LineChart","chartData","data","width","height","loader","chartType","options","backgroundColor","colors","lineWidth","axes","x","0","side","chartArea","hAxis","textPosition","baselineColor","ticks","vAxis","scaleType","Supply","circulating_supply","symbolCurrency","MarketCap","market_cap","volume_24h","PercentChange24h","percent_change_24h","InvisibleMenuTwo","inputVol","inputCap","TableBody","currentCoins","chartBodyMap","coin","key","_id","Table","Pagination","paginate","pageNumbers","activeClass","currentPage","pageNumber","onClick","href","App","coins","loading","coinsPerPage","totalPages","ceil","indexOfLastCoin","indexOfFirstCoin","helperPaginate","setState","update","setInterval","a","fetch","cache","response","console","log","status","json","dataJSON","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a358db2d.chunk.js","sourcesContent":["import React from 'react';\n\nexport const TableHead = () =>  ( \n        \n    <thead className='title_table gradVertical textShadowBlue'>\n        <tr >\n\n            <th id='logo_title' className='headTopBorder headLeftBorder'></th>\n\n            <th id='name_title' className='centerText headTopBorder'>Name</th>\n\n            <th id='symbol_title' className='centerText headTopBorder'>Symbol</th>\n\n            <th id='invisible_title' className='headTopBorder'>\n                Symbol<br/>\n                Name\n            </th>\n\n            <th  className='headTopBorder centerText'>Price USD</th>\n\n            <th  className='headTopBorder'>Change 24h</th>\n\n            <th id='chart_title' className='headTopBorder centerText'>24h Chart</th>\n\n            <th id='invisible_two_title' className='headTopBorder'>\n                Volume 24h<br/>\n                Market Cap\n            </th>\n\n            <th id='volume_24h_title' className='headTopBorder'>Volume 24h</th>\n\n            <th id='market_cap_title' className='headTopBorder'>Market Cap</th>\n            \n            <th  className='headTopBorder headRightBorder'>Supply</th>\n            \n        </tr>\n    </thead>  \n);\n\n","import * as React from 'react';\n\n\n\nexport const Name = ({ name }) => (     \n\n     <td className='name dark_grey_text white_BG borderBottom centerText'  id='name'>\n\n          { name }\n\n     </td>\n);\n\n\n\n ","import * as React from 'react';\n\n\n\nexport const Symbol = ({ symbol }) => (\n     \n     <td id='symbol' \n          className='text_bold symbol gradBG centerText textShadowGrey white_text text_bold headRightBorderGrey'  > \n\n          { symbol }\n\n     </td>\n);\n\n\n\n","export function dateTimeConvert(input) {\n\n      let convertTime = input.toString();\n\n      let day = convertTime.slice(0, 10);\n      let time = convertTime.slice(11, 19);\n\n      let result = `${day} ( ${time} )`\n\n      return result;\n};\n\nexport function toFixedTwo(input) {\n\n      let num = Math.floor(input * 100) / 100;\n      return num.toFixed(2)\n};\n\nexport function numbersAfterHundreds(input) {\n\n      // check this\n      if ( input === 0 ) {\n            return 0;  \n      }\n\n      let arrFromInput = ('' + input).split('.');\n      let splitted = ' ' + (arrFromInput[1].slice(2, arrFromInput[1].length));\n\n      return splitted;\n};\n\nexport function splitEveryThreeDigit(input) {\n\n      let arrFromInput = ('' + input).split('.');\n      let splitted = arrFromInput[0].split('');\n\n      let divider = splitted.length % 3;\n\n      let count    = 0;\n      let countTwo = 0;\n      let result   = '';\n\n      if (divider === 0) {\n            count = 0\n      };\n      if (divider === 1) {\n            count = 2\n      };\n      if (divider === 2) {\n            count = 1\n      };\n\n      for (let i = 0; i < splitted.length; i++) {\n            count++;\n            countTwo++;\n\n            result += splitted[i];\n\n            if (count === 3) {\n                  if (countTwo === splitted.length) {\n                        break;\n                  } else {\n                        result += ',';\n                        count = 0;\n                  }\n            };\n      }\n      return result;\n};\n\nexport function numberType(input) {\n\n      let splitted = ('' + input).split('.');\n      let result = '';\n\n      if (splitted[0].length > 9) {\n            result = ' Bn.';\n      } else if (splitted[0].length > 6) {\n            result = ' mil';\n      }\n      return result;\n};\n\nexport function percentageColor(input) {\n\n      if (+input >= 0) {\n            return 'green-text';\n      }\n      return 'tomato-text';\n};\n\nexport function logoPicture(input) {\n\n      let pic =` https://s2.coinmarketcap.com/static/img/coins/128x128/${input}.png`;\n      return pic\n};\n\nexport async function componentDidMount () {\n      try {\n            setInterval(async () => {\n       \n                  await this.update()\n                  \n            }, 60000);\n      } catch(e) {\n            console.log(e);\n      }\n}\n\n\n\n\n\n// export function chartDataHelper(input) {\n      \n//       let arrHead = [\n//             ['', 'Price USD']\n//       ];\n\n//       let priceAndTimeData = [];\n\n//       const everyNthNum = (arr, nth) => arr.filter((e, i) => i % nth === nth - 1);\n      \n//       let nthNumber = 6;\n\n//       if (input.length < 13) {\n//             nthNumber = 1;\n//       }\n\n//       everyNthNum( input, nthNumber ).map( (el) => (\n            \n//             priceAndTimeData.push([dateTimeConvert(el.time), el.price])\n//       ));\n      \n//       return  arrHead.concat(priceAndTimeData);\n// };","import * as React      from 'react';\nimport { logoPicture } from '../../helpers/helpers';\n\n\n\nexport const LogoPic = ({ logoPic }) => (\n\n     <td id='logo' className='logo LeftBorder greyLightBG white_text'>\n\n          <img id='innerLogo' src={ logoPicture(logoPic) } alt='coin' />\n          \n     </td>\n);\n\n\n\n\n\n\n\n\n","import * as React   from 'react';\n\n\nexport const InvisibleMenu = ({symbol, name}) => \n(\n     <td id='invisible' className='borderBottom white_BG'>\n\n          <span> </span>\n\n          <span className='greyBlue_text text_bold'>\n\n               { symbol }\n\n          </span>\n          \n     <br/>\n\n          <span className='grey_text name'>{ name }</span>\n\n     </td>\n);\n\n","import * as React   from 'react';\nimport  {Component} from 'react';\nimport { numbersAfterHundreds, toFixedTwo } from '../../helpers/helpers';\n\n \n\nexport default class Price extends Component {\n     constructor(props){\n          super(props);\n\n          this.state = {\n               price_time : [{}]\n          }\n     }\n\nstatic getDerivedStateFromProps( nextProps, prevState ) {\n     if (nextProps.input !== prevState.input) {\n           \n           return { price_time: nextProps.input };\n     }\n     else return null;\n}\n\n        \n     render() {\n\n          const { price_time } = this.state;\n\n          return (\n               <td className='centerText purple_text bold_text borderBottom white_BG'>\n\n                    <span className='superSmall grey_text'>&#36;</span>\n\n                         { toFixedTwo( price_time[price_time.length - 1].price ) }\n                    \n                    <span className='superSmallPrice'>\n\n                         { numbersAfterHundreds( price_time[ price_time.length - 1].price )}\n\n                    </span>\n\n               </td>\n          );\n     }\n}\n","\nimport { dateTimeConvert } from './helpers';\n\n\nexport function chartDataHelper(input) {\n      \n     let arrHead = [\n           ['', 'Price USD']\n     ];\n\n     let priceAndTimeData = [];\n\n     const everyNthNum = (arr, nth) => arr.filter((e, i) => i % nth === nth - 1);\n     \n     let nthNumber = 6;\n\n     if (input.length < 13) {  nthNumber = 1; };\n\n\n     everyNthNum( input, nthNumber ).map( (el) => (\n           \n           priceAndTimeData.push([dateTimeConvert(el.time), el.price])\n     ));\n     \n     return  arrHead.concat(priceAndTimeData);\n};","import * as React          from 'react';\nimport { Component }       from 'react';\nimport { Chart }           from 'react-google-charts';\nimport { chartDataHelper } from '../../helpers/helperChart';\n\n\n\nexport default class LineChart extends Component {\n      constructor(props) {\n            super(props);\n\n            this.state = {\n                  chartData: [] \n            }\n      }\n\n      static getDerivedStateFromProps( nextProps, prevState ) {\n            if (nextProps.input !== prevState.input) {\n\n                  return { chartData: nextProps.input };\n            }\n            else return null;\n      }\n\n      render() {\n\n            const { chartData } = this.state;\n\n            return (\n                  <td id ='chart' className='chart borderBottom white_BG'>  \n                        <Chart\n                              data      =  {chartDataHelper(chartData)}\n                              width     =  {'120px'}\n                              height    =  {'40px'}\n                              loader    =  {<div className='ultraSmall'>Loading...</div>}\n                              chartType =  'LineChart'\n                              options   =  {{\n                                    backgroundColor: 'none',\n                                    colors: ['rgb(124, 67, 255)'],\n                                    lineWidth: 1,\n                                    axes: {\n                                          x: {\n                                                0: { side: 'top' }\n                                          }\n                                    },\n                                    chartArea: {\n                                          width: '150%',\n                                          height: '175%'\n                                    },\n                                    hAxis: {\n                                          textPosition: 'none',\n                                          baselineColor: 'none',\n                                          ticks: []\n                                    },\n                                    vAxis: {\n                                          textPosition: 'none',\n                                          baselineColor: 'none',\n                                          ticks: [],\n                                          scaleType: 'Linear'\n                                    }\n                              }\n                        }/>\n                  </td>\n            );\n      }\n}\n","import * as React   from 'react';\nimport  {Component} from 'react';\n\nimport { splitEveryThreeDigit } from '../../helpers/helpers';\n\n\n\nexport default class Supply extends Component {\n     constructor(props){\n          super(props);\n\n          this.state = {\n               circulating_supply : 0,\n               symbol: props.symbolCurrency\n          }\n     }\n\nstatic getDerivedStateFromProps( nextProps, prevState ) {\n     if (nextProps.input !== prevState.input) {\n           \n           return { circulating_supply: nextProps.input };\n     }\n     else return null;\n}\n          render() {\n\n               const { circulating_supply, symbol } = this.state;\n\n               return (\n                    <td className='borderBottom white_BG'>\n\n                         <span className='greyBlue_text'>{ splitEveryThreeDigit(circulating_supply) }</span>\n\n                              <span> </span>\n\n                         <span className='superSmall grey_text white_BG'>{ symbol }</span> \n\n                    </td>\n               );\n     }\n}\n","import * as React  from 'react';\nimport {Component} from 'react';\n\nimport { numberType, \n         splitEveryThreeDigit } from '../../helpers/helpers';\n\n\n         \nexport default class MarketCap extends Component {\n     constructor(props){\n          super(props);\n\n          this.state = {\n               market_cap : 0\n          }\n     }\n     \nstatic getDerivedStateFromProps( nextProps, prevState ) {\n     if (nextProps.input !== prevState.input) {\n           \n           return { market_cap: nextProps.input };\n     }\n     else return null;\n}\n    \n     render() {\n\n          const { market_cap } = this.state;\n\n          return (\n               <td className='borderBottom white_BG' id='market_cap'>\n\n                    { <span className='superSmall grey_text'>&#36;</span> }\n\n                         <span className='greyBlue_text'>{ splitEveryThreeDigit(market_cap) } </span>\n\n                    { <span className='superSmall grey_text'>{ numberType(market_cap) }</span> }\n\n               </td> \n          );\n     }\n}\n","import React, { Component } from 'react';\n\nimport { splitEveryThreeDigit, \n         numberType } from '../../helpers/helpers';\n\n \n         \nexport default class MarketCap extends Component {\n     constructor(props){\n          super(props);\n\n          this.state = {\n               volume_24h : 0,\n          }\n     }\n\nstatic getDerivedStateFromProps( nextProps, prevState ) {\n     if (nextProps.input !== prevState.input) {\n           \n           return { volume_24h: nextProps.input };\n     }\n     else return null;\n}\n        \n     render() {\n\n          const { volume_24h } = this.state;\n\n          return (\n               <td id='volume_24h' className='borderBottom white_BG'>\n\n                    <span className='superSmall grey_text'>&#36;</span>\n\n                         <span className='greyBlue_text'>{ splitEveryThreeDigit(volume_24h) }</span>\n\n                    <span className='superSmall grey_text'>\n\n                         { numberType(volume_24h) }\n\n                    </span>\n                    \n               </td>\n          );\n     }\n}\n","import * as React   from 'react';\nimport  {Component} from 'react';\n\nimport { percentageColor, \n         toFixedTwo } from '../../helpers/helpers';\n\n \n         \nexport default class PercentChange24h extends Component {\n     constructor(props){\n          super(props);\n\n          this.state = {\n               percent_change_24h : 0\n          }\n     }\n\nstatic getDerivedStateFromProps( nextProps, prevState ) {\n     if (nextProps.input !== prevState.input) {\n           \n           return { percent_change_24h: nextProps.input };\n     }\n     else return null;\n}\n    \n     render() {\n\n          const { percent_change_24h } = this.state;\n\n          return (\n\n               <td className='centerText bold_text borderBottom white_BG'  > \n\n                    <span className={ percentageColor(percent_change_24h) }>\n                                    {      toFixedTwo(percent_change_24h) }</span>\n\n                    <span className='superSmall grey_text'>%</span>\n\n               </td>\n          );\n     }\n}","import * as React    from 'react';\nimport { Component } from 'react';\n\nimport { splitEveryThreeDigit,  numberType } from '../../helpers/helpers';\n\n\n\nexport default class InvisibleMenuTwo extends Component {\n     constructor(props){\n          super(props);\n\n          this.state = {\n               volume_24h : 0,\n               market_cap : 0\n          }\n     }\nstatic getDerivedStateFromProps( nextProps, prevState ) {\n     if (nextProps.inputVol !== prevState.inputVol) {\n           \n          return { \n\n               volume_24h: nextProps.inputVol ,\n               market_cap : nextProps.inputCap\n          };\n     }\n     else return null;\n}\n     \n     render() {\n\n          const { volume_24h, market_cap } = this.state;\n\n          return (\n               <td id='invisible_two'  className='borderBottom white_BG'>\n                   \n                    <span className='small'></span>\n\n                    <span className='superSmall grey_text'>&#36;</span> \n\n                         { splitEveryThreeDigit(volume_24h) }\n\n                    <span className='superSmall grey_text'>\n\n                         { numberType(volume_24h) }</span>\n\n                    <span className='small'></span>\n                         <br/>\n                    <span className='superSmall grey_text'>&#36;</span>\n               \n                         { splitEveryThreeDigit(market_cap) } \n\n                    <span className='superSmall grey_text'>\n\n                         { numberType(market_cap) }\n                   \n                    </span>\n               </td>\n          );\n     }\n}\n","import React             from  'react';\nimport { Component }     from  'react';\nimport { Name }          from  './tableComponents/Name';\nimport { Symbol }        from  './tableComponents/Symbol';\nimport { LogoPic }       from  './tableComponents/LogoPic';\nimport { InvisibleMenu } from  './tableComponents/InvisibleMenu'\nimport Price             from  './tableComponents/Price';\nimport Chart             from  './tableComponents/Chart';\nimport Supply            from  './tableComponents/Supply';\nimport MarketCap         from  './tableComponents/MarketCap';\nimport Volume24h         from  './tableComponents/Volume24h';\nimport PercentChange24h  from  './tableComponents/PercentChange24h';\nimport InvisibleMenuTwo  from  './tableComponents/InvisibleMenuTwo';\n\n\n\nexport default class TableBody extends Component{\n      \n      constructor(props){\n            super(props);\n  \n            this.state = {\n                  currentCoins : props.input\n            }\n       }\n\n\n       static getDerivedStateFromProps( nextProps, prevState ) {\n            if (nextProps.input !== prevState.input) {\n                  \n                  return { currentCoins: nextProps.input };\n            }\n            else return null;\n       }\n\n      render(){\n\n            const { currentCoins } = this.state;\n      \n            let chartBodyMap = currentCoins.map( coin => (\n                  \n                  <tr key = {coin._id}>\n\n                        <LogoPic          logoPic  =  { coin.id } />\n\n                        <InvisibleMenu    symbol   =  { coin.symbol } name = { coin.name } />\n\n                        <Symbol           symbol   =  { coin.symbol } />\n\n                        <Name             name     =  { coin.name } />\n\n                        <Price            input    =  { coin.price_time } />\n\n                        <PercentChange24h input    =  { coin.percent_change_24h } />\n                        \n                        <Chart            input    =  { coin.price_time } />\n\n                        <Volume24h        input    =  { coin.volume_24h } />\n\n                        <InvisibleMenuTwo inputVol =  { coin.volume_24h }  inputCap = { coin.market_cap } />\n\n                        <MarketCap        input    =  { coin.market_cap } />\n\n                        <Supply           input    =  { coin.circulating_supply } symbolCurrency = { coin.symbol } />\n\n                  </tr>   \n            ))\n            return <tbody>{ chartBodyMap }</tbody>\n      }    \n}\n\n\n\n","import React          from 'react';\nimport { Component }  from 'react';\nimport { TableHead }  from './TableHead';\nimport TableBody      from './TableBody';\n\n\n\nexport default class Table extends Component{\n      \n\tconstructor(props){\n\t\t super(props);\n \n\t\t this.state = {\n\t\t\t  currentCoins : props.input\n\t\t }\n\t }\n\n static getDerivedStateFromProps( nextProps, prevState ) {\n            if (nextProps.input !== prevState.input) {\n                  \n                  return { currentCoins: nextProps.input };\n            }\n            else return null;\n       }\n\n\trender(){\n\n          const { currentCoins } = this.state;\n\t\t\n\t\treturn (\n\t\t\t<table>\n\n\t\t\t\t<TableHead />\n\n\t\t\t\t<TableBody input={ currentCoins } />\n\n\t\t\t</table>\n\t\t)\n\t}    \n}\n\n\n\n","import  * as React   from 'react';\nimport { Component } from 'react';\n\n\n\nexport default class Pagination extends Component {\n          constructor( props ) {\n               super( props );\n     \n               this.state = {\n                    paginate    : props.paginate,\n                    pageNumbers : props.pageNumbers,\n                    activeClass : props.currentPage\n               }\n          }\nstatic getDerivedStateFromProps( nextProps, prevState ) {\n     if (nextProps.currentPage !== prevState.currentPage) {\n               \n               return { activeClass: nextProps.currentPage };\n     }\n     else return null;\n}\n          render() {\n               \n               const { paginate, pageNumbers, activeClass} = this.state;\n\n               return (\n                    <div className='pagination'>\n                         { pageNumbers.map( pageNumber => (\n                              <span key='number' >\n                                   \n                                   <a onClick = { () => paginate(pageNumber) } \n                                        href = '#' \n                                        className = {  activeClass        ===  pageNumber ? 'active'           : '' ||                   \n                                                       pageNumbers[0]     ===  pageNumber ? 'firstPage'        : '' ||\n                                                       activeClass - 2    ===  pageNumber ? 'lightTransparent' : '' ||\n                                                       activeClass - 1    ===  pageNumber ? 'prevPage'         : '' ||\n                                                       activeClass        ===  pageNumber ? 'active'           : '' ||\n                                                       pageNumbers.length ===  pageNumber ? 'lastPage'         : '' ||\n                                                       activeClass + 1    ===  pageNumber ? 'nextPage'         : '' || \n                                                       activeClass + 2    ===  pageNumber ? 'lightTransparent' : 'transparent'\n                                                       } >\n                                        { pageNumber }\n                                   </a>\n                              </span>  \n                         ))}\n                    </div>\n               )\n          }\n     }\n        \n\n          ","import React              from 'react';\nimport { Component }      from 'react';\nimport Table              from './components/Table';\nimport Pagination         from './components/Pagination';\nimport { helperPaginate } from './helpers/helperPaginate'\n\n\nexport default class App extends Component{\n     \n\tstate = {\n\t\tcoins        : [],\n\t\tloading      : true,\n\t\tcurrentPage  : 1,\n\t\tcoinsPerPage : 12\n\t}\n\n\trender() {\n\n\t\tif (this.state.loading || !this.state.coins) {\n\n\t\t\treturn <div className='loading'></div>\n\t\t\t\n\t\t} else {\n\n\t\t\tconst  { currentCoins, pageNumbers } =  helperPaginate(\n\t\t\t\t\t\t\t\t\t\t\t\tthis.state.coins,\n\t\t\t\t\t\t\t\t\t\t\t\tthis.state.currentPage,\n\t\t\t\t\t\t\t\t\t\t\t\tthis.state.coinsPerPage\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\tconst paginate = ( pageNumber ) => \n\t\t\t\n\t\t\t\tthis.setState({\n\t\t\t\t\tcurrentPage: pageNumber\n\t\t\t})\n\n\t\t\treturn (\n\n\t\t\t\t<div className='wrap'>\n\n\t\t\t\t\t<div className=''> TOP <strong>99</strong> CRYPTO-CURRENCIES </div>\n\n\t\t\t\t\t<div className='table'>\n\n\t\t\t\t\t\t< Table  input = { currentCoins }/>\n\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<span className='paginationWrap'>\n\n\t\t\t\t\t\t< Pagination  pageNumbers = { pageNumbers }  \n\t\t\t\t\t\t\t\t    paginate    = { paginate } \n\t\t\t\t\t\t\t\t    currentPage = { this.state.currentPage }/>\n\t\t\t\t\t</span>\n\t\t\t\t\t\n\t\t\t\t</div>\t\n\t\t\t)\n          }    \n\t}\n\n\t\n     componentDidMount() {\n\t\t\n\t\tthis.update()\n\n\t\tsetInterval(async () => {\n\n\t\t\t this.update()\n\t\t\t \n\t\t}, 60000);\n\t}\n\n\n\n\tasync  update() {\n\t\tconst url = \"/instruments\";\n\n\t\ttry {\n\n\t\t\tconst response = await fetch(url, { cache: \"no-store\" }); // fetch(url)\n\t\t\tconsole.log(response.status);\n\t\t\tconst dataJSON = await response.json();\n\n\t\t\tthis.setState({\n\t\t\t\tcoins: dataJSON,\n\t\t\t\tloading: false\n\t\t\t});\n\n\t\t\t// this.setState(prevState => ({\n\t\t\t// \tcoins: dataJSON,\n\t\t\t// \tloading: false\n\t\t\t// }));\n\t\t\t\n\t\t} catch (error) {\n\n\t\t\tconsole.log(error)\n\t\t}\n\t}\n}\n\n\n","export function helperPaginate(coins, currentPage, coinsPerPage) {\n     \n     let pageNumbers        =  [];\n     const totalPages       =  Math.ceil(coins.length /coinsPerPage);\n// Current Coin\n     const indexOfLastCoin  =  currentPage * coinsPerPage;\n     const indexOfFirstCoin =  indexOfLastCoin - coinsPerPage;\n     const currentCoins     =  coins.slice(indexOfFirstCoin, indexOfLastCoin);\n\n     for (let i = 1; i <= totalPages; i++) {\n\n          pageNumbers.push(i)\n     }\n\n     return { currentCoins, pageNumbers }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React              from 'react';\nimport ReactDOM           from 'react-dom';\nimport  App               from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './css/style.css';\n\n\n              /////  /////\nReactDOM.render(<App />, document.getElementById('root'));\n              /////  /////\n\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}