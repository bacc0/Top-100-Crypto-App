{"ast":null,"code":"import { dateTimeConvert } from './helpers';\nexport function chartDataHelper(input) {\n  let arrHead = [['', 'Price USD']];\n\n  if (input.length <= 2 || undefined) {\n    arrHead = [['', 'Price USD'], []];\n    return;\n  }\n\n  let priceAndTimeData = [];\n\n  const everyNthNum = (arr, nth) => arr.filter((e, i) => i % nth === nth - 1);\n\n  let nthNumber = 6; // 6\n\n  if (input.length < 13) {\n    nthNumber = 1;\n  }\n\n  ;\n  everyNthNum(input, nthNumber).map(el => priceAndTimeData.push([dateTimeConvert(el.time), el.price]));\n  return arrHead.concat(priceAndTimeData);\n}\n;","map":{"version":3,"sources":["/Users/bacco/Desktop/App-Top-100-Crypto/Top-100-Crypto-App-React copy.js/src/helpers/helperChart.js"],"names":["dateTimeConvert","chartDataHelper","input","arrHead","length","undefined","priceAndTimeData","everyNthNum","arr","nth","filter","e","i","nthNumber","map","el","push","time","price","concat"],"mappings":"AACA,SAASA,eAAT,QAAgC,WAAhC;AAGA,OAAO,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAEjC,MAAIC,OAAO,GAAG,CACR,CAAC,EAAD,EAAK,WAAL,CADQ,CAAd;;AAIA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAAhB,IAAqBC,SAAzB,EAAoC;AAE9BF,IAAAA,OAAO,GAAG,CACJ,CAAC,EAAD,EAAK,WAAL,CADI,EACc,EADd,CAAV;AAGA;AACL;;AAED,MAAIG,gBAAgB,GAAG,EAAvB;;AAEA,QAAMC,WAAW,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAcD,GAAG,CAACE,MAAJ,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,GAAGH,GAAJ,KAAYA,GAAG,GAAG,CAAvC,CAAlC;;AAEA,MAAII,SAAS,GAAG,CAAhB,CAlBiC,CAkBd;;AAEnB,MAAIX,KAAK,CAACE,MAAN,GAAe,EAAnB,EAAuB;AAAGS,IAAAA,SAAS,GAAG,CAAZ;AAAgB;;AAAA;AAG1CN,EAAAA,WAAW,CAAEL,KAAF,EAASW,SAAT,CAAX,CAAgCC,GAAhC,CAAsCC,EAAD,IAE/BT,gBAAgB,CAACU,IAAjB,CAAsB,CAAChB,eAAe,CAACe,EAAE,CAACE,IAAJ,CAAhB,EAA2BF,EAAE,CAACG,KAA9B,CAAtB,CAFN;AAKA,SAAQf,OAAO,CAACgB,MAAR,CAAeb,gBAAf,CAAR;AACL;AAAA","sourcesContent":["\nimport { dateTimeConvert } from './helpers';\n\n\nexport function chartDataHelper(input) {\n      \n      let arrHead = [\n            ['', 'Price USD']\n      ];\n\n      if (input.length <= 2 || undefined) { \n            \n            arrHead = [\n                  ['', 'Price USD'],[]\n            ];\n            return\n      }\n\n      let priceAndTimeData = [];\n\n      const everyNthNum = (arr, nth) => arr.filter((e, i) => i % nth === nth - 1);\n      \n      let nthNumber = 6; // 6\n\n      if (input.length < 13) {  nthNumber = 1; };\n\n\n      everyNthNum( input, nthNumber ).map( (el) => (\n            \n            priceAndTimeData.push([dateTimeConvert(el.time), el.price])\n      ));\n      \n      return  arrHead.concat(priceAndTimeData);\n};"]},"metadata":{},"sourceType":"module"}