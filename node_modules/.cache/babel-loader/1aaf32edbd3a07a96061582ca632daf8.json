{"ast":null,"code":"export function dateTimeConvert(input) {\n  let convertTime = input.toString();\n  let day = convertTime.slice(0, 10);\n  let time = convertTime.slice(11, 19);\n  let result = \"\".concat(day, \" ( \").concat(time, \" )\");\n  return result;\n}\n;\nexport function toFixedTwo(input) {\n  let num = Math.floor(input * 100) / 100;\n  return num.toFixed(2);\n}\n; // export function numbersAfterHundreds(input) {\n//       // check this\n//       if ( input === 0 ) {\n//             return 0;  \n//       }\n//       let arrFromInput = ('' + input).split('.');\n//       let splitted = ' ' + (arrFromInput[1].slice(2, arrFromInput[1].length));\n//       return splitted;\n// };\n\nexport function splitEveryThreeDigit(input) {\n  let arrFromInput = ('' + input).split('.');\n  let splitted = arrFromInput[0].split('');\n  let divider = splitted.length % 3;\n  let count = 0;\n  let countTwo = 0;\n  let result = '';\n\n  if (divider === 0) {\n    count = 0;\n  }\n\n  ;\n\n  if (divider === 1) {\n    count = 2;\n  }\n\n  ;\n\n  if (divider === 2) {\n    count = 1;\n  }\n\n  ;\n\n  for (let i = 0; i < splitted.length; i++) {\n    count++;\n    countTwo++;\n    result += splitted[i];\n\n    if (count === 3) {\n      if (countTwo === splitted.length) {\n        break;\n      } else {\n        result += ',';\n        count = 0;\n      }\n    }\n\n    ;\n  }\n\n  return result;\n}\n;\nexport function numberType(input) {\n  let splitted = ('' + input).split('.');\n  let result = '';\n\n  if (splitted[0].length > 9) {\n    result = ' Bn.';\n  } else if (splitted[0].length > 6) {\n    result = ' mil';\n  }\n\n  return result;\n}\n;\nexport function percentageColor(input) {\n  if (+input >= 0) {\n    return 'green-text';\n  }\n\n  return 'tomato-text';\n}\n;\nexport function logoPicture(input) {\n  let pic = \" https://s2.coinmarketcap.com/static/img/coins/128x128/\".concat(input, \".png\");\n  return pic;\n}\n;\nexport async function componentDidMount() {\n  try {\n    setInterval(async () => {\n      await this.update();\n    }, 60000);\n  } catch (e) {\n    console.log(e);\n  }\n} // export function chartDataHelper(input) {\n//       let arrHead = [\n//             ['', 'Price USD']\n//       ];\n//       let priceAndTimeData = [];\n//       const everyNthNum = (arr, nth) => arr.filter((e, i) => i % nth === nth - 1);\n//       let nthNumber = 6;\n//       if (input.length < 13) {\n//             nthNumber = 1;\n//       }\n//       everyNthNum( input, nthNumber ).map( (el) => (\n//             priceAndTimeData.push([dateTimeConvert(el.time), el.price])\n//       ));\n//       return  arrHead.concat(priceAndTimeData);\n// };","map":{"version":3,"sources":["/Users/bacco/Desktop/App-Top-100-Crypto/Top-100-Crypto-App-React.js/src/helpers/helpers.js"],"names":["dateTimeConvert","input","convertTime","toString","day","slice","time","result","toFixedTwo","num","Math","floor","toFixed","splitEveryThreeDigit","arrFromInput","split","splitted","divider","length","count","countTwo","i","numberType","percentageColor","logoPicture","pic","componentDidMount","setInterval","update","e","console","log"],"mappings":"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","sourcesContent":["export function dateTimeConvert(input) {\n\n      let convertTime = input.toString();\n\n      let day = convertTime.slice(0, 10);\n      let time = convertTime.slice(11, 19);\n\n      let result = `${day} ( ${time} )`\n\n      return result;\n};\n\nexport function toFixedTwo(input) {\n\n      let num = Math.floor(input * 100) / 100;\n      return num.toFixed(2)\n};\n\n// export function numbersAfterHundreds(input) {\n\n//       // check this\n//       if ( input === 0 ) {\n//             return 0;  \n//       }\n\n//       let arrFromInput = ('' + input).split('.');\n//       let splitted = ' ' + (arrFromInput[1].slice(2, arrFromInput[1].length));\n\n//       return splitted;\n// };\n\nexport function splitEveryThreeDigit(input) {\n\n      let arrFromInput = ('' + input).split('.');\n      let splitted = arrFromInput[0].split('');\n\n      let divider = splitted.length % 3;\n\n      let count    = 0;\n      let countTwo = 0;\n      let result   = '';\n\n      if (divider === 0) {\n            count = 0\n      };\n      if (divider === 1) {\n            count = 2\n      };\n      if (divider === 2) {\n            count = 1\n      };\n\n      for (let i = 0; i < splitted.length; i++) {\n            count++;\n            countTwo++;\n\n            result += splitted[i];\n\n            if (count === 3) {\n                  if (countTwo === splitted.length) {\n                        break;\n                  } else {\n                        result += ',';\n                        count = 0;\n                  }\n            };\n      }\n      return result;\n};\n\nexport function numberType(input) {\n\n      let splitted = ('' + input).split('.');\n      let result = '';\n\n      if (splitted[0].length > 9) {\n            result = ' Bn.';\n      } else if (splitted[0].length > 6) {\n            result = ' mil';\n      }\n      return result;\n};\n\nexport function percentageColor(input) {\n\n      if (+input >= 0) {\n            return 'green-text';\n      }\n      return 'tomato-text';\n};\n\nexport function logoPicture(input) {\n\n      let pic =` https://s2.coinmarketcap.com/static/img/coins/128x128/${input}.png`;\n      return pic\n};\n\nexport async function componentDidMount () {\n      try {\n            setInterval(async () => {\n       \n                  await this.update()\n                  \n            }, 60000);\n      } catch(e) {\n            console.log(e);\n      }\n}\n\n\n\n\n\n// export function chartDataHelper(input) {\n      \n//       let arrHead = [\n//             ['', 'Price USD']\n//       ];\n\n//       let priceAndTimeData = [];\n\n//       const everyNthNum = (arr, nth) => arr.filter((e, i) => i % nth === nth - 1);\n      \n//       let nthNumber = 6;\n\n//       if (input.length < 13) {\n//             nthNumber = 1;\n//       }\n\n//       everyNthNum( input, nthNumber ).map( (el) => (\n            \n//             priceAndTimeData.push([dateTimeConvert(el.time), el.price])\n//       ));\n      \n//       return  arrHead.concat(priceAndTimeData);\n// };"]},"metadata":{},"sourceType":"module"}