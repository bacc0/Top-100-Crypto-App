{"ast":null,"code":"var _jsxFileName = \"/Users/bacco/Desktop/App-Top-100-Crypto/Top-100-Crypto-App-React.js/src/App.js\";\nimport React from 'react';\nimport { Component } from 'react';\nimport Table from './components/Table';\nimport Pagination from './components/Pagination';\nimport { helperPaginate } from './helpers/helperPaginate';\n\nconst axios = require('axios').default;\n\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      coins: [],\n      loading: true,\n      currentPage: 1,\n      coinsPerPage: 120,\n      starts: 1,\n      count: 2\n    };\n\n    this.fetchImages = () => {\n      const _this$state = this.state,\n            count = _this$state.count,\n            starts = _this$state.starts;\n      this.setState({\n        start: this.state.starts + count\n      });\n      axios.get(\"/info?starts=\".concat(starts, \"&count=\").concat(count)).then(res => this.setState({\n        coins: this.state.coins.concat(res.data)\n      }));\n    };\n  }\n\n  render() {\n    if (this.state.loading || !this.state.coins) {\n      return React.createElement(\"div\", {\n        className: \"loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      });\n    } else {\n      const _helperPaginate = helperPaginate(this.state.coins, this.state.currentPage, this.state.coinsPerPage),\n            currentCoins = _helperPaginate.currentCoins,\n            pageNumbers = _helperPaginate.pageNumbers; // const paginate = ( pageNumber ) => \n      // \tthis.setState({\n      // \t\tcurrentPage: pageNumber\n      // })\n\n\n      return React.createElement(\"div\", {\n        className: \"wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \" TOP \", React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"99\"), \" CRYPTO-CURRENCIES \"), React.createElement(\"div\", {\n        className: \"table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(Table, {\n        input: this.scoins,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      })));\n    }\n  }\n\n  componentDidMount() {\n    const _this$state2 = this.state,\n          count = _this$state2.count,\n          starts = _this$state2.starts;\n    axios.get(\"/info?starts=\".concat(starts, \"&count=\").concat(count)).then(res => this.setState({\n      coins: res.data\n    }));\n  } // componentDidMount() {\n  // \tthis.update()\n  // \tsetInterval(async () => {\n  // \t\t this.update()\n  // \t}, 100);\n  // }\n  // async  update() {\n  // \t// const url = \"/instruments\";\n  // \tconst { coins, starts, count } = this.state;\n  // \tconst url = `/info?starts=${starts}&count=${count}`;\n  // \ttry {\n  // \t\tconst response = await fetch(url, { cache: \"no-store\" }); // fetch(url)\n  // \t\tconsole.log(response.status);\n  // \t\tconst dataJSON = await response.json();\n  // \t\tthis.setState({\n  // \t\t\tcoins  : coins.concat(dataJSON),\n  // \t\t\tstarts : starts  + starts,\n  // \t\t\tloading: false\n  // \t\t});\n  // \t\t// this.setState(prevState => ({\n  // \t\t// \tcoins: dataJSON,\n  // \t\t// \tloading: false\n  // \t\t// }));\n  // \t} catch (error) {\n  // \t\tconsole.log(error)\n  // \t}\n  // }\n\n\n}","map":{"version":3,"sources":["/Users/bacco/Desktop/App-Top-100-Crypto/Top-100-Crypto-App-React.js/src/App.js"],"names":["React","Component","Table","Pagination","helperPaginate","axios","require","default","App","state","coins","loading","currentPage","coinsPerPage","starts","count","fetchImages","setState","start","get","then","res","concat","data","render","currentCoins","pageNumbers","scoins","componentDidMount"],"mappings":";AAAA,OAAOA,KAAP,MAA+B,OAA/B;AACA,SAASC,SAAT,QAA+B,OAA/B;AACA,OAAOC,KAAP,MAA+B,oBAA/B;AACA,OAAOC,UAAP,MAA+B,yBAA/B;AACA,SAASC,cAAT,QAA+B,0BAA/B;;AAEA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiBC,OAA/B;;AAGA,eAAe,MAAMC,GAAN,SAAkBP,SAAlB,CAA2B;AAAA;AAAA;AAAA,SAEzCQ,KAFyC,GAEjC;AACPC,MAAAA,KAAK,EAAU,EADR;AAEPC,MAAAA,OAAO,EAAQ,IAFR;AAGPC,MAAAA,WAAW,EAAI,CAHR;AAIPC,MAAAA,YAAY,EAAG,GAJR;AAKPC,MAAAA,MAAM,EAAS,CALR;AAMPC,MAAAA,KAAK,EAAU;AANR,KAFiC;;AAAA,SA+DzCC,WA/DyC,GA+D3B,MAAM;AAAA,0BACO,KAAKP,KADZ;AAAA,YACXM,KADW,eACXA,KADW;AAAA,YACJD,MADI,eACJA,MADI;AAEnB,WAAKG,QAAL,CAAc;AAAEC,QAAAA,KAAK,EAAE,KAAKT,KAAL,CAAWK,MAAX,GAAoBC;AAA7B,OAAd;AACAV,MAAAA,KAAK,CACHc,GADF,wBACsBL,MADtB,oBACsCC,KADtC,GAEEK,IAFF,CAEOC,GAAG,IACR,KAAKJ,QAAL,CAAc;AAAEP,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,CAAiBY,MAAjB,CAAwBD,GAAG,CAACE,IAA5B;AAAT,OAAd,CAHF;AAKA,KAvEwC;AAAA;;AAWzCC,EAAAA,MAAM,GAAG;AAER,QAAI,KAAKf,KAAL,CAAWE,OAAX,IAAsB,CAAC,KAAKF,KAAL,CAAWC,KAAtC,EAA6C;AAE5C,aAAO;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAEA,KAJD,MAIO;AAAA,8BAEkCN,cAAc,CAC7C,KAAKK,KAAL,CAAWC,KADkC,EAE7C,KAAKD,KAAL,CAAWG,WAFkC,EAG7C,KAAKH,KAAL,CAAWI,YAHkC,CAFhD;AAAA,YAEGY,YAFH,mBAEGA,YAFH;AAAA,YAEiBC,WAFjB,mBAEiBA,WAFjB,EAON;AAEA;AACA;AACA;;;AAEA,aAEC;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEC;AAAK,QAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAvB,wBAFD,EAIC;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEC,oBAAE,KAAF;AAAS,QAAA,KAAK,EAAK,KAAKC,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFD,CAJD,CAFD;AAqBQ;AACT;;AAIDC,EAAAA,iBAAiB,GAAG;AAAA,yBACO,KAAKnB,KADZ;AAAA,UACXM,KADW,gBACXA,KADW;AAAA,UACJD,MADI,gBACJA,MADI;AAEnBT,IAAAA,KAAK,CACHc,GADF,wBACsBL,MADtB,oBACsCC,KADtC,GAEEK,IAFF,CAEOC,GAAG,IAAI,KAAKJ,QAAL,CAAc;AAAEP,MAAAA,KAAK,EAAEW,GAAG,CAACE;AAAb,KAAd,CAFd;AAGA,GA7DwC,CA0ErC;AAEJ;AAEA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;AAnHyC","sourcesContent":["import React              from 'react';\nimport { Component }      from 'react';\nimport Table              from './components/Table';\nimport Pagination         from './components/Pagination';\nimport { helperPaginate } from './helpers/helperPaginate'\n\nconst axios = require('axios').default;\n\n\nexport default class App extends Component{\n     \n\tstate = {\n\t\tcoins        : [],\n\t\tloading      : true,\n\t\tcurrentPage  : 1,\n\t\tcoinsPerPage : 120,\n\t\tstarts       : 1,\n\t\tcount        : 2\n\t}\n\n\trender() {\n\n\t\tif (this.state.loading || !this.state.coins) {\n\n\t\t\treturn <div className='loading'></div>\n\t\t\t\n\t\t} else {\n\n\t\t\tconst  { currentCoins, pageNumbers } =  helperPaginate(\n\t\t\t\t\t\t\t\t\t\t\t\tthis.state.coins,\n\t\t\t\t\t\t\t\t\t\t\t\tthis.state.currentPage,\n\t\t\t\t\t\t\t\t\t\t\t\tthis.state.coinsPerPage\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t// const paginate = ( pageNumber ) => \n\t\t\t\n\t\t\t// \tthis.setState({\n\t\t\t// \t\tcurrentPage: pageNumber\n\t\t\t// })\n\n\t\t\treturn (\n\n\t\t\t\t<div className='wrap'>\n\n\t\t\t\t\t<div className=''> TOP <strong>99</strong> CRYPTO-CURRENCIES </div>\n\n\t\t\t\t\t<div className='table'>\n\n\t\t\t\t\t\t< Table  input = { this.scoins }/>\n\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* <span className='paginationWrap'>\n\n\t\t\t\t\t\t< Pagination  pageNumbers = { pageNumbers }  \n\t\t\t\t\t\t\t\t    paginate    = { paginate } \n\t\t\t\t\t\t\t\t    currentPage = { this.state.currentPage }/>\n\t\t\t\t\t</span> */}\n\t\t\t\t\t\n\t\t\t\t</div>\t\n\t\t\t)\n          }    \n\t}\n\n\t\n\n\tcomponentDidMount() {\n\t\tconst { count, starts } = this.state;\n\t\taxios\n\t\t\t.get(`/info?starts=${starts}&count=${count}`)\n\t\t\t.then(res => this.setState({ coins: res.data }));\n\t}\n\n\tfetchImages = () => {\n\t\tconst { count, starts } = this.state;\n\t\tthis.setState({ start: this.state.starts + count });\n\t\taxios\n\t\t\t.get(`/info?starts=${starts}&count=${count}`)\n\t\t\t.then(res =>\n\t\t\t\tthis.setState({ coins: this.state.coins.concat(res.data) })\n\t\t\t);\n\t};\n\n\n     // componentDidMount() {\n\t\t\n\t// \tthis.update()\n\n\t// \tsetInterval(async () => {\n\n\t// \t\t this.update()\n\t\t\t \n\t// \t}, 100);\n\t// }\n\n\n\n\t// async  update() {\n\t// \t// const url = \"/instruments\";\n\t// \tconst { coins, starts, count } = this.state;\n\t// \tconst url = `/info?starts=${starts}&count=${count}`;\n\n\n\t// \ttry {\n\n\t// \t\tconst response = await fetch(url, { cache: \"no-store\" }); // fetch(url)\n\t// \t\tconsole.log(response.status);\n\t// \t\tconst dataJSON = await response.json();\n\n\t// \t\tthis.setState({\n\t// \t\t\tcoins  : coins.concat(dataJSON),\n\t// \t\t\tstarts : starts  + starts,\n\t// \t\t\tloading: false\n\t\t\t\t\n\t// \t\t});\n\n\t// \t\t// this.setState(prevState => ({\n\t// \t\t// \tcoins: dataJSON,\n\t// \t\t// \tloading: false\n\t// \t\t// }));\n\t\t\t\n\t// \t} catch (error) {\n\n\t// \t\tconsole.log(error)\n\t// \t}\n\t// }\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}