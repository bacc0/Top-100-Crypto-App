{"ast":null,"code":"var _jsxFileName = \"/Users/bacco/Desktop/App-Top-100-Crypto/Top-100-Crypto-App-React.js/src/App.js\";\nimport React from 'react';\nimport { Component } from 'react';\nimport Table from './components/Table';\nimport Pagination from './components/Pagination';\nimport { helperPaginate } from './helpers/helperPaginate';\nimport { render } from \"react-dom\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      coins: [],\n      count: 33,\n      starts: 0,\n      hasMore: true\n    };\n\n    this.loadMore = () => {\n      const _this$state = this.state,\n            starts = _this$state.starts,\n            count = _this$state.count; // if (starts > 90) return;\n\n      this.setState({\n        starts: starts + count\n      });\n      console.log(starts);\n      this.loadCoins();\n    };\n  }\n\n  render() {\n    return React.createElement(InfiniteScroll, {\n      dataLength: this.state.coins.length,\n      next: this.loadMore,\n      hasMore: this.state.hasMore // loader={<h4>Loading...</h4>}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"wrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \" TOP \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"99\"), \" CRYPTO-CURRENCIES \"), React.createElement(\"div\", {\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(Table, {\n      input: this.state.coins,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    })), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"------------\"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, this.state.starts)));\n  }\n\n  componentDidMount() {\n    this.loadCoins();\n    setInterval(async () => {\n      this.updateCoins();\n    }, 300000);\n  }\n\n  async loadCoins() {\n    const _this$state2 = this.state,\n          coins = _this$state2.coins,\n          starts = _this$state2.starts,\n          count = _this$state2.count;\n    const url = \"/info?starts=\".concat(starts, \"&count=\").concat(count);\n\n    try {\n      const response = await fetch(url, {\n        cache: \"no-store\"\n      }); // fetch(url)\n\n      console.log(response.status);\n      const dataJSON = await response.json();\n\n      if (starts > 100) {\n        let a = false;\n      }\n\n      this.setState({\n        coins: coins.concat(dataJSON),\n        starts: starts + count,\n        hasMore: a\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async updateCoins() {\n    const url = \"/instruments\";\n\n    try {\n      const response = await fetch(url, {\n        cache: \"no-store\"\n      }); // fetch(url)\n\n      console.log(response.status);\n      const dataJSON = await response.json();\n      this.setState({\n        coins: dataJSON\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/bacco/Desktop/App-Top-100-Crypto/Top-100-Crypto-App-React.js/src/App.js"],"names":["React","Component","Table","Pagination","helperPaginate","render","InfiniteScroll","App","state","coins","count","starts","hasMore","loadMore","setState","console","log","loadCoins","length","componentDidMount","setInterval","updateCoins","url","response","fetch","cache","status","dataJSON","json","a","concat","error"],"mappings":"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","sourcesContent":["import React              from 'react';\nimport { Component }      from 'react';\nimport Table              from './components/Table';\nimport Pagination         from './components/Pagination';\nimport { helperPaginate } from './helpers/helperPaginate'\n\nimport { render } from \"react-dom\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\n\nexport default class App extends Component{\n     \n\tstate = {\n\t\tcoins   :  [],\n\t\tcount   :  33,\n\t\tstarts  :  0,\n\t\thasMore :  true\n\t}\n\t\n\t\n\trender() {\n\n\t\treturn (\n\n\n\t\t<InfiniteScroll\n\t\t\t\tdataLength={this.state.coins.length }\n\t\t\t\tnext={this.loadMore}\n\t\t\t\thasMore={this.state.hasMore}\n\t\t\t\t// loader={<h4>Loading...</h4>}\n\t\t\t>\n\n\t\t\t<div className='wrap'>\n\n\n\t\t\t\t<div className=''> TOP <strong>99</strong> CRYPTO-CURRENCIES </div>\n\n\t\t\t\t<div className='table'>\n\t\t\t\t\n\t\t\t\t\t< Table  input = { this.state.coins }/>\n\t\t\t\t\n\t\t\t\t</div>\n\n\t\t\t\t<span>------------</span><span>{this.state.starts}</span>\n\t\t\t</div>\n\n\t\t\t</InfiniteScroll>\n\t\t)\n\t}\n\t\n\tcomponentDidMount() {\n\n\t\tthis.loadCoins();\n\n\t\tsetInterval(async () => {\n\n\t\t\t this.updateCoins();\n\t\t\t \n\t\t}, 300000);\n\t}\n\t\n\tloadMore = () => {\n\t\tconst { starts, count } = this.state;\n\n\t\t// if (starts > 90) return;\n\t\tthis.setState( ({\n\t\t\tstarts  : starts + count\n\t\t}))\n\t\tconsole.log(starts)\n\n\t\tthis.loadCoins();\n\t}\n\n\tasync  loadCoins() {\n\n\t\tconst { coins, starts, count } = this.state;\n\t\tconst url = `/info?starts=${starts}&count=${count}`;\n\n\t\ttry {\n\n\t\t\tconst response = await fetch(url, { cache: \"no-store\" }); // fetch(url)\n\t\t\tconsole.log(response.status);\n\t\t\tconst dataJSON = await response.json();\n\n\t\t\tif (starts > 100) {\n\t\t\t\tlet a = false;\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\tcoins   : coins.concat(dataJSON),\n\t\t\t\tstarts  : starts  + count ,\n\t\t\t\thasMore : a\n\t\t\t});\n\t\t\t\n\t\t} catch (error) {\n\n\t\t\tconsole.log(error)\n\t\t}\n\t}\n\n\tasync  updateCoins() {\n\t\tconst url = \"/instruments\";\n\n\t\ttry {\n\n\t\t\tconst response = await fetch(url, { cache: \"no-store\" }); // fetch(url)\n\t\t\tconsole.log(response.status);\n\t\t\tconst dataJSON = await response.json();\n\n\t\t\tthis.setState({\n\t\t\t\tcoins: dataJSON\n\t\t\t});\n\n\t\t} catch (error) {\n\n\t\t\tconsole.log(error)\n\t\t}\n\t}\n}\n\n\n"]},"metadata":{},"sourceType":"module"}