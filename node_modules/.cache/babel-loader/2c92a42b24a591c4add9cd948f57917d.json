{"ast":null,"code":"var _jsxFileName = \"/Users/bacco/Desktop/App-Top-100-Crypto/Top-100-Crypto-App-React.js/src/App.js\";\nimport React from 'react';\nimport { Component } from 'react';\nimport Table from './components/Table';\nimport Pagination from './components/Pagination';\nimport { helperPaginate } from './helpers/helperPaginate';\n\nconst axios = require('axios').default;\n\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      coins: [],\n      loading: true,\n      // currentPage  : 1,\n      // coinsPerPage : 1,\n      starts: 0,\n      count: 10\n    };\n  }\n\n  render() {\n    if (this.state.loading || !this.state.coins) {\n      return React.createElement(\"div\", {\n        className: \"loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      });\n    } else {\n      // const  { currentCoins, pageNumbers } =  helperPaginate(\n      // \t\t\t\t\t\t\t\t\tthis.state.coins,\n      // \t\t\t\t\t\t\t\t\tthis.state.currentPage,\n      // \t\t\t\t\t\t\t\t\tthis.state.coinsPerPage\n      // \t\t\t\t\t\t\t\t);\n      // const paginate = ( pageNumber ) => \n      // \tthis.setState({\n      // \t\tcurrentPage: pageNumber\n      // })\n      return React.createElement(\"div\", {\n        className: \"wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \" TOP \", React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"99\"), \" CRYPTO-CURRENCIES \"), React.createElement(\"div\", {\n        className: \"table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(Table, {\n        input: this.state.coins,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        href: \"#\",\n        onClick: this.loadMore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Button\"));\n    }\n  }\n\n  loadMore() {\n    console.log(\"ccc\");\n    this.setState(prevState => ({\n      coins: coins.concat(dataJSON),\n      starts: starts + count,\n      loading: false\n    }));\n  }\n\n  componentDidMount() {\n    this.loadCoins(); // \tsetInterval(async () => {\n    // \t\tthis.loadCoins();\n    //     }, 300);\n    // this.updateCoins();\n    // // this.updateCoins();\n\n    setInterval(async () => {\n      this.updateCoins();\n    }, 300000);\n  }\n\n  async loadCoins() {\n    // const url = \"/instruments\";\n    const _this$state = this.state,\n          coins = _this$state.coins,\n          starts = _this$state.starts,\n          count = _this$state.count;\n    const url = \"/info?starts=\".concat(starts, \"&count=\").concat(count);\n\n    try {\n      const response = await fetch(url, {\n        cache: \"no-store\"\n      }); // fetch(url)\n\n      console.log(response.status);\n      const dataJSON = await response.json();\n      this.setState({\n        coins: coins.concat(dataJSON),\n        starts: starts + count,\n        loading: false\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async updateCoins() {\n    const url = \"/instruments\";\n\n    try {\n      const response = await fetch(url, {\n        cache: \"no-store\"\n      }); // fetch(url)\n\n      console.log(response.status);\n      const dataJSON = await response.json();\n      this.setState({\n        coins: dataJSON,\n        loading: false\n      }); // this.setState(prevState => ({\n      // \tcoins: dataJSON,\n      // \tloading: false\n      // }));\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/bacco/Desktop/App-Top-100-Crypto/Top-100-Crypto-App-React.js/src/App.js"],"names":["React","Component","Table","Pagination","helperPaginate","axios","require","default","App","state","coins","loading","starts","count","render","loadMore","console","log","setState","prevState","concat","dataJSON","componentDidMount","loadCoins","setInterval","updateCoins","url","response","fetch","cache","status","json","error"],"mappings":"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","sourcesContent":["import React              from 'react';\nimport { Component }      from 'react';\nimport Table              from './components/Table';\nimport Pagination         from './components/Pagination';\nimport { helperPaginate } from './helpers/helperPaginate'\n\nconst axios = require('axios').default;\n\n\nexport default class App extends Component{\n     \n\tstate = {\n\t\tcoins        : [],\n\t\tloading      : true,\n\t\t// currentPage  : 1,\n\t\t// coinsPerPage : 1,\n\t\tstarts       : 0,\n\t\tcount        : 10\n\t}\n\n\t\n\trender() {\n\n\t\tif (this.state.loading || !this.state.coins) {\n\n\t\t\treturn <div className='loading'></div>\n\t\t\t\n\t\t} else {\n\n\t\t\t// const  { currentCoins, pageNumbers } =  helperPaginate(\n\t\t\t// \t\t\t\t\t\t\t\t\tthis.state.coins,\n\t\t\t// \t\t\t\t\t\t\t\t\tthis.state.currentPage,\n\t\t\t// \t\t\t\t\t\t\t\t\tthis.state.coinsPerPage\n\t\t\t// \t\t\t\t\t\t\t\t);\n\t\t\t// const paginate = ( pageNumber ) => \n\t\t\t\n\t\t\t// \tthis.setState({\n\t\t\t// \t\tcurrentPage: pageNumber\n\t\t\t// })\n\t\t\t\n\t\t\treturn (\n\t\t\t\t\n\n\t\t\t\t\t<div className='wrap'>\n\n\t\t\t\t\t\t<div className=''> TOP <strong>99</strong> CRYPTO-CURRENCIES </div>\n\n\t\t\t\t\t\t<div className='table'>\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t< Table  input = { this.state.coins }/>\n\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* <span className='paginationWrap'>\n\n\t\t\t\t\t\t\t< Pagination  pageNumbers = { pageNumbers }  \n\t\t\t\t\t\t\t\t\tpaginate    = { paginate } \n\t\t\t\t\t\t\t\t\tcurrentPage = { this.state.currentPage }/>\n\t\t\t\t\t\t</span> */}\n\t\t\t\t\t\t<button href=\"#\" onClick={this.loadMore} >Button</button>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t)\n          }    \n\t}\n\t\n\tloadMore(){\n\t\tconsole.log(\"ccc\")\n\t\t\n\t\tthis.setState(prevState => ({\n\t\t\tcoins  : coins.concat(dataJSON),\n\t\t\tstarts : starts  + count ,\n\t\t\tloading: false\n\t\t\t\n\t\t}));\n\t}\n\n\n     componentDidMount() {\n\n\t\tthis.loadCoins();\n\t\t\n\t// \tsetInterval(async () => {\n\n\t// \t\tthis.loadCoins();\n\t\t\t\n\t//     }, 300);\n\t\t// this.updateCoins();\n\n\t\t\n\t\t// // this.updateCoins();\n\n\t\tsetInterval(async () => {\n\n\t\t\t this.updateCoins();\n\t\t\t \n\t\t}, 300000);\n\t}\n\n\n\n\tasync  loadCoins() {\n\t\t\t// const url = \"/instruments\";\n\t\t\tconst { coins, starts, count } = this.state;\n\t\t\tconst url = `/info?starts=${starts}&count=${count}`;\n\n\n\t\t\ttry {\n\n\t\t\t\tconst response = await fetch(url, { cache: \"no-store\" }); // fetch(url)\n\t\t\t\tconsole.log(response.status);\n\t\t\t\tconst dataJSON = await response.json();\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tcoins  : coins.concat(dataJSON),\n\t\t\t\t\tstarts : starts  + count ,\n\t\t\t\t\tloading: false\n\t\t\t\t\t\n\t\t\t\t});\n\t\t\t\t\n\t\t\t} catch (error) {\n\n\t\t\t\tconsole.log(error)\n\t\t\t}\n\t\t\t\n\t}\n\n\n\n\n\tasync  updateCoins() {\n\t\tconst url = \"/instruments\";\n\n\t\ttry {\n\n\t\t\tconst response = await fetch(url, { cache: \"no-store\" }); // fetch(url)\n\t\t\tconsole.log(response.status);\n\t\t\tconst dataJSON = await response.json();\n\n\t\t\tthis.setState({\n\t\t\t\tcoins: dataJSON,\n\t\t\t\tloading: false\n\t\t\t});\n\n\t\t\t// this.setState(prevState => ({\n\t\t\t// \tcoins: dataJSON,\n\t\t\t// \tloading: false\n\t\t\t// }));\n\t\t\t\n\t\t} catch (error) {\n\n\t\t\tconsole.log(error)\n\t\t}\n\t}\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}